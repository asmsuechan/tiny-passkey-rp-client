export const authenticate = (challenge: string) => {
  // var credentialId = new Uint8Array([
  //   183, 148,
  //   245 /* more random bytes previously generated by the authenticator */,
  // ]);
  const rawCredId =
    "10fab53d822010ba95035c99af13add0225d52e2cc658205856ccd83723c4d88";
  const credentialId = new Uint8Array(
    rawCredId.match(/.{1,2}/g)!.map((v) => parseInt(v, 16))
  );

  console.log(credentialId);
  const options = {
    challenge: new TextEncoder().encode(challenge),
    timeout: 300000, // 5 minutes
    // allowCredentialsってどういう意味や？
    // allowCredentialは、既にユーザーがRP側で特定されている場合にそのユーザーのcredentialIdを指定する
    // 指定しなければChromeはCredential一覧を出してユーザーに選ばせる
    // * Client-side discoverable Credential
    // * Server-side Credential
    // どちらもAuthentication ceremonyで使う。allowCredentialに食わせるCredentialのこと。シンプルにAuthenticationセレモニーで使う鍵の保存場所と対応している。
    // > the Relying Party invokes navigator.credentials.get() with an empty allowCredentials argument. This means that the Relying Party does not necessarily need to first identify the user.
    // ユーザーがAuthentication Ceremony以前に特定できている場合は、allowCredentialsにユーザーと対応するCredentialIdを指定する
    allowCredentials: [
      {
        type: "public-key" as PublicKeyCredentialType,
        id: credentialId,
        transports: ["internal"] as AuthenticatorTransport[],
      },

      {
        type: "public-key" as PublicKeyCredentialType,
        id: new Uint8Array(
          "4fdcc162bd2ffcf1e3f055ef2b1a7e188770a6a92103ffa00edb11c423cccd10"
            .match(/.{1,2}/g)!
            .map((v) => parseInt(v, 16))
        ),
        transports: ["internal"] as AuthenticatorTransport[],
      },
    ],
  };

  return navigator.credentials
    .get({ publicKey: options })
    .then((assertion) => {
      console.log(assertion);
      // 6からサーバーに送る
      // * credentialRawId
      // * userHandle

      // clientDataJSONはこうなる
      // new TextDecoder().decode(assertion.response.clientDataJSON)
      // '{"type":"webauthn.get","challenge":"BGUP","origin":"http://localhost:5173","crossOrigin":false}'
      debugger;
      // Send assertion to server for verification
    })
    .catch((err) => {
      console.log(err);
      // No acceptable credential or user refused consent. Handle appropriately.
    });
};
